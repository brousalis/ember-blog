/**
For targeting all modifier classes with a common base
*/

@mixin mod($classBeginsWith) {
  $class: '#{$classBeginsWith}-';

  *[class^='#{$class}'], *[class*='#{$class}'] {
    @content;
  }
}

/**
Remove the unit from a number
*/

@function strip_unit($num) {
  @return $num / ($num * 0 + 1);
}

/**
Return sizing in rem with a px fallback (where 1rem = 10px because of 62.5% base font size)
*/

@mixin rem($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip_unit(nth($values, $i)) * 10;
    $pxValues: #{$pxValues + $value}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip_unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}

/**
For cross-modern-browser animation syntax
*/

@mixin animation($animation) {
  -webkit-animation: $animation;
  -moz-animation: $animation;
  animation: $animation;
}

/**
For cross-modern-browser animation keyframes syntax
*/

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

/**
Easy-use image path return
*/

@function img($name) {
  @return url('#{$imagePath}#{$name}');
}

/**
Gradient text, with optional fallback for use with Modernizr
*/

@mixin gradientText($fallbackColor, $from, $stops...) {
  color: $fallbackColor;

  .backgroundclip & {
    @include background-image(linear-gradient($from, $stops));
    -webkit-text-fill-color: transparent;
    @include background-clip(text);
    color: transparent;
  }
}
