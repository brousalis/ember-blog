{"version":3,"file":"javascripts/app.js","sources":["app/config/app.js","app/config/env.js","app/config/router.js","app/config/store.js","app/controllers/application_controller.js","app/controllers/category_controller.js","app/controllers/index_controller.js","app/fixtures/categories.js","app/fixtures/posts.js","app/initialize.js","app/initializers/posts_fixtures.js","app/mixins/-options.js","app/mixins/categories.js","app/mixins/controller_mixin.js","app/models/category.js","app/models/posts.js","app/posts/welcome-to-ember.md","app/posts/welcome-to-your-ember-blog.md","app/routes/category_route.js","app/routes/index_route.js","app/routes/post_route.js","app/templates/about.hbs","app/templates/application.hbs","app/templates/category.hbs","app/templates/index.hbs","app/templates/partials/_footer.hbs","app/templates/partials/_header.hbs","app/templates/partials/_navigation.hbs","app/templates/post.hbs","app/templates/post_preview.hbs","app/views/about_view.js","app/views/application_view.js","app/views/ember_list_view.js","app/views/posts_view.js","envs/development/env.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;CCAA;AAAA;AACA;AADA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhDA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtl5CA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AAHA;AAAA","sourcesContent":["'use strict';\n\nvar config = {\n    LOG_TRANSITIONS: true,\n    LOG_TRANSITIONS_INTERNAL: false\n};\n\nmodule.exports = Ember.Application.create(config);\n","'use strict';\n\nmodule.exports = (function() {\n  var envObject = {};\n  var moduleNames = window.require.list().filter(function(module) {\n    return new RegExp('^envs/').test(module);\n  });\n\n  moduleNames.forEach(function(module) {\n    var key = module.split('/').reverse()[0];\n    envObject[key] = require(module);\n  });\n\n  return envObject;\n}());\n","'use strict';\n\nmodule.exports = (function() {\n\n  App.Router.map(function() {\n    this.route('index', { path: '/' });\n    this.route('about');\n    this.resource('post', { path: '/post/:post_url' });\n    this.resource('category', { path: '/category/:category_name' });\n  });\n\n  if (Modernizr.history) {\n    App.Router.reopen({\n      location: 'history'\n    });\n  } else {\n    App.Router.reopen({\n      location: 'hash'\n    });\n  }\n\n}());\n","'use strict';\n\nmodule.exports = (function() {\n\n  App.ApplicationStore = DS.Store.extend({\n    revision: 13\n  });\n\n  App.ApplicationAdapter = DS.FixtureAdapter.extend();\n\n}());\n","'use strict';\n\nApp.ApplicationController = Em.ObjectController.extend({\n\n});\n","'use strict';\n\nApp.CategoryController = Em.ArrayController.extend({\n  sortProperties: ['published:desc'],\n  sortedPosts: Em.computed.sort('posts', 'sortProperties'),\n});\n","'use strict';\n\nApp.IndexController = Em.ArrayController.extend({\n  sortProperties: ['published:desc'],\n  sortedPosts: Em.computed.sort('content', 'sortProperties'),\n});\n","'use strict';\n\nApp.Category.FIXTURES = [\n  {\n    id: 1,\n    name: 'Ember',\n  },{\n    id: 2,\n    name: 'Rails',\n  },\n  {\n    id: 3,\n    name: 'Design',\n  },\n  {\n    id: 4,\n    name: 'Lifestyle',\n  }\n];\n","App.Post.FIXTURES = [];\n","'use strict';\n\nwindow.App = require('config/app');\nrequire('config/router');\nrequire('config/store');\n\n// Load all modules in order automagically. Ember likes things to work this\n// way so everything is in the App.* namespace.\nvar folderOrder = [\n    'initializers', 'models', 'fixtures', 'mixins',\n    'routes', 'views', 'controllers', 'helpers',\n    'templates', 'components'\n];\n\nfolderOrder.forEach(function(folder) {\n  window.require.list().filter(function(module) {\n    return new RegExp('^' + folder + '/').test(module);\n  }).forEach(function(module) {\n    require(module);\n  });\n});\n","'use strict';\n\nEm.Application.initializer({\n  name: 'postsFixtures',\n\n  initialize: function(container, application) {\n    var postIndex = 1;\n\n    // Load each post and add it to the fixtures with post model\n    window.require.list().filter(function(module) {\n      return new RegExp('^posts/').test(module);\n    }).forEach(function(module) {\n      var post = require(module);\n\n      // Add index to object (required for Ember fixtures)\n      post['id'] = postIndex;\n\n      // Rename content for model (can't start with an underscore and content is reserved)\n      post['body'] = post['__content'];\n      delete post['__content'];\n\n      container.lookup('store:main').createRecord('post', post);\n\n      postIndex++;\n    });\n  },\n})\n","'use strict';\n\nApp.Options = Em.Mixin.create({\n  // Basic settings\n  blogTitle: 'Octosmashed',\n  blogAuthor: 'Duncan Walker',\n\n  // Social\n\n  // Misc\n  googleAnalyticsCode: 'xouxou',\n});\n","'use strict';\n\nApp.Categories = Em.Mixin.create({\n  categories: function() {\n    var store = this.get('store');\n    var categories = store.find('category');\n\n    return categories;\n  }.property(),\n});\n","'use strict';\n\nEm.ControllerMixin.reopen(\n  App.Categories,\n  App.Options, {\n\n});\n","'use strict';\n\nvar attr = DS.attr;\nvar hasMany = DS.attr;\n\nApp.Category = DS.Model.extend({\n  name: attr('string'),\n  // posts: hasMany('post'),\n});\n","var attr = DS.attr;\nvar hasMany = DS.attr;\n\nApp.Post = DS.Model.extend({\n  title: attr('string'),\n  published: attr('date'),\n  categories: hasMany('category'),\n  content: attr('string'),\n});\n","module.exports = {\"title\":\"More Ember stuff\",\"description\":\"This is a description of the ember stuff in this article\",\"published\":\"2014-03-01T00:00:00.000Z\",\"categories\":[\"ember\",\"design\"],\"__content\":\"<p>This is a lot more content for markdown parsing</p>\\n<p><strong>Ok yeah</strong></p>\\n\"}","module.exports = {\"title\":\"Welcome to Your Ember Blog\",\"description\":\"How to do stuff with your Ember blog\",\"published\":\"2014-03-30T00:00:00.000Z\",\"categories\":[\"ember\",\"lifestyle\"],\"__content\":\"<p>Loads of text for this amazing blog post!</p>\\n<p>You now have</p>\\n<ul>\\n<li>Jekyll</li>\\n<li>Html5 Boilerplate based templates</li>\\n<li>jQuery and Modernizr</li>\\n<li>Sass and Compass</li>\\n<li>rdiscount markdown parser and Pygments highlighter</li>\\n</ul>\\n<p>installed.</p>\\n<p><strong>Enjoy coding!</strong></p>\\n\"}","'use strict';\n\nApp.CategoryRoute = Ember.Route.extend({\n  posts: [],\n\n  // Category data\n  model: function(params) {\n    var category = this.store.find('category', params.category_name);\n    return category;\n  },\n\n  // Posts data\n  afterModel: function(params) {\n    var _this = this;\n\n    return this.store.filter('post', function(post) {\n      var categories = post.get('categories');\n      var pageCategory = params.get('name').toLowerCase();\n\n      return categories.indexOf(pageCategory) > -1;\n    }).then(function(result) {\n      _this.set('posts', result.content);\n    });\n  },\n\n  // URL\n  serialize: function(model) {\n    var obj = { category_name: model.get('name').dasherize() };\n    return obj;\n  },\n\n  setupController: function() {\n    var posts = this.get('posts');\n    this.controller.set('posts', posts);\n  },\n\n});\n","'use strict';\n\nApp.IndexRoute = Ember.Route.extend({\n\n  model: function() {\n    var posts = this.store.all('post');\n    return posts;\n  },\n});\n","'use strict';\n\nApp.PostRoute = Em.Route.extend({\n\n  model: function(params) {\n    var post = this.store.find('post', params.post_url);\n    return post;\n  },\n\n  // URL\n  serialize: function(model) {\n    var obj = { post_url: model.get('title').dasherize() };\n    return obj;\n  },\n\n});\n","module.exports = Ember.TEMPLATES['about'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  \n\n\n  data.buffer.push(\"<div class=\\\"modal\\\">\\n  <p>Testing the modal</p>\\n</div>\\n\");\n  \n});","module.exports = Ember.TEMPLATES['application'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"partials/header\", options) : helperMissing.call(depth0, \"partial\", \"partials/header\", options))));\n  data.buffer.push(\"\\n\\n<main class=\\\"main\\\" role=\\\"main\\\">\\n  \");\n  stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n</main>\\n\\n\");\n  data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"partials/footer\", options) : helperMissing.call(depth0, \"partial\", \"partials/footer\", options))));\n  data.buffer.push(\"\\n\\n<!-- Google Analytics: change UA-XXXXX-X to be your site's ID. -->\\n<script>\\n  (function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=\\n  function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;\\n  e=o.createElement(i);r=o.getElementsByTagName(i)[0];\\n  e.src='//www.google-analytics.com/analytics.js';\\n  r.parentNode.insertBefore(e,r)}(window,document,'script','ga'));\\n  ga('create','\");\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"googleAnalyticsCode\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"');ga('send','pageview');\\n</script>\\n\");\n  return buffer;\n  \n});","module.exports = Ember.TEMPLATES['category'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  data.buffer.push(escapeExpression(helpers.log.call(depth0, \"content\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n\\n<h1>\");\n  stack1 = helpers._triageMustache.call(depth0, \"name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</h1>\\n\\n\");\n  data.buffer.push(escapeExpression((helper = helpers.collection || (depth0 && depth0.collection),options={hash:{\n    'content': (\"sortedPosts\")\n  },hashTypes:{'content': \"ID\"},hashContexts:{'content': depth0},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"App.PostsView\", options) : helperMissing.call(depth0, \"collection\", \"App.PostsView\", options))));\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});","module.exports = Ember.TEMPLATES['index'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<h2>Posts</h2>\\n\\n\");\n  data.buffer.push(escapeExpression((helper = helpers.collection || (depth0 && depth0.collection),options={hash:{\n    'content': (\"sortedPosts\")\n  },hashTypes:{'content': \"ID\"},hashContexts:{'content': depth0},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"App.PostsView\", options) : helperMissing.call(depth0, \"collection\", \"App.PostsView\", options))));\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});","module.exports = Ember.TEMPLATES['partials/_footer'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  \n\n\n  data.buffer.push(\"<div class=\\\"footer\\\" role=\\\"contentinfo\\\">\\n  Footer\\n</div>\\n\");\n  \n});","module.exports = Ember.TEMPLATES['partials/_header'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<header class=\\\"header-sidebar\\\" role=\\\"banner\\\">\\n  \");\n  data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"partials/navigation\", options) : helperMissing.call(depth0, \"partial\", \"partials/navigation\", options))));\n  data.buffer.push(\"\\n</header>\\n\");\n  return buffer;\n  \n});","module.exports = Ember.TEMPLATES['partials/_navigation'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  \n  data.buffer.push(\"Home\");\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  data.buffer.push(\"About\");\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = '', stack1, helper, options;\n  data.buffer.push(\"\\n      <li>\\n        \");\n  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"category\", \"\", options) : helperMissing.call(depth0, \"link-to\", \"category\", \"\", options));\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n      </li>\\n    \");\n  return buffer;\n  }\nfunction program6(depth0,data) {\n  \n  var buffer = '', stack1;\n  data.buffer.push(\"\\n          \");\n  stack1 = helpers._triageMustache.call(depth0, \"name\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<nav class=\\\"nav\\\" role=\\\"navigation\\\">\\n  <ul>\\n    <li>\");\n  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"index\", options) : helperMissing.call(depth0, \"link-to\", \"index\", options));\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</li>\\n    <li>\");\n  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"about\", options) : helperMissing.call(depth0, \"link-to\", \"about\", options));\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</li>\\n    \");\n  stack1 = helpers.each.call(depth0, \"categories\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n  </ul>\\n</nav>\\n\");\n  return buffer;\n  \n});","module.exports = Ember.TEMPLATES['post'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<h1>\");\n  stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</h1>\\n\");\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"body\", {hash:{\n    'unescaped': (\"true\")\n  },hashTypes:{'unescaped': \"STRING\"},hashContexts:{'unescaped': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n  data.buffer.push(\"\\n\");\n  return buffer;\n  \n});","module.exports = Ember.TEMPLATES['post_preview'] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var stack1;\n  stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  else { data.buffer.push(''); }\n  }\n\n  data.buffer.push(\"<h2>\\n  \");\n  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"post\", \"\", options) : helperMissing.call(depth0, \"link-to\", \"post\", \"\", options));\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n</h2>\\n\\n<p>\");\n  stack1 = helpers._triageMustache.call(depth0, \"description\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"</p>\\n\");\n  return buffer;\n  \n});","App.AboutView = Em.View.extend({\n\n  testBootstrap: function() {\n    $('.modal').modal();\n  }.on('didInsertElement'),\n\n});\n","App.ApplicationView = Em.View.extend({\n  ariaRole: 'application',\n  classNames: ['page'],\n});\n","// Last commit: 37baf55 (2014-02-10 20:49:20 -0500)\n\n\n// ==========================================================================\n// Project:   Ember ListView\n// Copyright: Â©2012-2013 Erik Bryn, Yapp Inc., and contributors.\n// License:   Licensed under MIT license\n// ==========================================================================\n\n\n(function() {\nvar get = Ember.get, set = Ember.set;\n\nfunction samePosition(a, b) {\n  return a && b && a.x === b.x && a.y === b.y;\n}\n\nfunction positionElement() {\n  var element, position, _position;\n\n  Ember.instrument('view.updateContext.positionElement', this, function() {\n    element = get(this, 'element');\n    position = this.position;\n    _position = this._position;\n\n    if (!position || !element) { return; }\n\n    // TODO: avoid needing this by avoiding unnecessary\n    // calls to this method in the first place\n    if (samePosition(position, _position)) { return; }\n    Ember.run.schedule('render', this, this._parentView.applyTransform, element, position.x, position.y);\n    this._position = position;\n  }, this);\n}\n\nEmber.ListItemViewMixin = Ember.Mixin.create({\n  init: function(){\n    this._super();\n    this.one('didInsertElement', positionElement);\n  },\n  classNames: ['ember-list-item-view'],\n  _position: null,\n  updatePosition: function(position) {\n    this.position = position;\n    this._positionElement();\n  },\n  _positionElement: positionElement\n});\n\n})();\n\n\n\n(function() {\nvar get = Ember.get, set = Ember.set;\n\nvar backportedInnerString = function(buffer) {\n  var content = [], childBuffers = buffer.childBuffers;\n\n  Ember.ArrayPolyfills.forEach.call(childBuffers, function(buffer) {\n    var stringy = typeof buffer === 'string';\n    if (stringy) {\n      content.push(buffer);\n    } else {\n      buffer.array(content);\n    }\n  });\n\n  return content.join('');\n};\n\nfunction willInsertElementIfNeeded(view) {\n  if (view.willInsertElement) {\n    view.willInsertElement();\n  }\n}\n\nfunction didInsertElementIfNeeded(view) {\n  if (view.didInsertElement) {\n    view.didInsertElement();\n  }\n}\n\nfunction rerender() {\n  var element, buffer, context, hasChildViews;\n  element = get(this, 'element');\n\n  if (!element) { return; }\n\n  context = get(this, 'context');\n\n  // releases action helpers in contents\n  // this means though that the ListViewItem itself can't use classBindings or attributeBindings\n  // need support for rerender contents in ember\n  this.triggerRecursively('willClearRender');\n\n  if (this.lengthAfterRender > this.lengthBeforeRender) {\n    this.clearRenderedChildren();\n    this._childViews.length = this.lengthBeforeRender; // triage bug in ember\n  }\n\n  if (context) {\n    buffer = Ember.RenderBuffer();\n    buffer = this.renderToBuffer(buffer);\n\n    // check again for childViews, since rendering may have added some\n    hasChildViews = this._childViews.length > 0;\n\n    if (hasChildViews) {\n      this.invokeRecursively(willInsertElementIfNeeded, false);\n    }\n\n    element.innerHTML = buffer.innerString ? buffer.innerString() : backportedInnerString(buffer);\n\n    set(this, 'element', element);\n\n    this.transitionTo('inDOM');\n\n    if (hasChildViews) {\n      this.invokeRecursively(didInsertElementIfNeeded, false);\n    }\n  } else {\n    element.innerHTML = ''; // when there is no context, this view should be completely empty\n  }\n}\n\n/**\n  The `Ember.ListViewItem` view class renders a\n  [div](https://developer.mozilla.org/en/HTML/Element/div) HTML element\n  with `ember-list-item-view` class. It allows you to specify a custom item\n  handlebars template for `Ember.ListView`.\n\n  Example:\n\n  ```handlebars\n  <script type=\"text/x-handlebars\" data-template-name=\"row_item\">\n    {{name}}\n  </script>\n  ```\n\n  ```javascript\n  App.ListView = Ember.ListView.extend({\n    height: 500,\n    rowHeight: 20,\n    itemViewClass: Ember.ListItemView.extend({templateName: \"row_item\"})\n  });\n  ```\n\n  @extends Ember.View\n  @class ListItemView\n  @namespace Ember\n*/\nEmber.ListItemView = Ember.View.extend(Ember.ListItemViewMixin, {\n  updateContext: function(newContext){\n    var context = get(this, 'context');\n    Ember.instrument('view.updateContext.render', this, function() {\n      if (context !== newContext) {\n        set(this, 'context', newContext);\n        if (newContext && newContext.isController) {\n          set(this, 'controller', newContext);\n        }\n      }\n    }, this);\n  },\n  rerender: function () { Ember.run.scheduleOnce('render', this, rerender); },\n  _contextDidChange: Ember.observer(rerender, 'context', 'controller')\n});\n\n})();\n\n\n\n(function() {\nvar get = Ember.get, set = Ember.set;\n\nEmber.ReusableListItemView = Ember.View.extend(Ember.ListItemViewMixin, {\n  init: function(){\n    this._super();\n    this.set('context', Ember.ObjectProxy.create());\n  },\n  isVisible: Ember.computed('context.content', function(){\n    return !!this.get('context.content');\n  }),\n  updateContext: function(newContext){\n    var context = get(this, 'context.content');\n    if (context !== newContext) {\n      if (this.state === 'inDOM') {\n        this.prepareForReuse(newContext);\n      }\n\n      set(this, 'context.content', newContext);\n\n      if (newContext && newContext.isController) {\n        set(this, 'controller', newContext);\n      }\n    }\n  },\n  prepareForReuse: Ember.K\n});\n\n})();\n\n\n\n(function() {\nvar el = document.createElement('div'), style = el.style;\n\nvar propPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n\nfunction testProp(prop) {\n  if (prop in style) return prop;\n  var uppercaseProp = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i=0; i<propPrefixes.length; i++) {\n    var prefixedProp = propPrefixes[i] + uppercaseProp;\n    if (prefixedProp in style) {\n      return prefixedProp;\n    }\n  }\n  return null;\n}\n\nvar transformProp = testProp('transform');\nvar perspectiveProp = testProp('perspective');\n\nvar supports2D = transformProp !== null;\nvar supports3D = perspectiveProp !== null;\n\nEmber.ListViewHelper = {\n  transformProp: transformProp,\n  applyTransform: (function(){\n    if (supports2D) {\n      return function(element, x, y){\n        element.style[transformProp] = 'translate(' + x + 'px, ' + y + 'px)';\n      };\n    } else {\n      return function(element, x, y){\n        element.style.top  = y + 'px';\n        element.style.left = x + 'px';\n      };\n    }\n  })(),\n  apply3DTransform: (function(){\n    if (supports3D) {\n      return function(element, x, y){\n        element.style[transformProp] = 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n      };\n    } else if (supports2D) {\n      return function(element, x, y){\n        element.style[transformProp] = 'translate(' + x + 'px, ' + y + 'px)';\n      };\n    } else {\n      return function(element, x, y){\n        element.style.top  = y + 'px';\n        element.style.left = x + 'px';\n      };\n    }\n  })()\n};\n\n})();\n\n\n\n(function() {\nvar get = Ember.get, set = Ember.set,\nmin = Math.min, max = Math.max, floor = Math.floor,\nceil = Math.ceil,\nforEach = Ember.ArrayPolyfills.forEach;\n\nfunction addContentArrayObserver() {\n  var content = get(this, 'content');\n  if (content) {\n    content.addArrayObserver(this);\n  }\n}\n\nfunction removeAndDestroy(object){\n  this.removeObject(object);\n  object.destroy();\n}\n\nfunction syncChildViews(){\n  Ember.run.once(this, '_syncChildViews');\n}\n\nfunction sortByContentIndex (viewOne, viewTwo){\n  return get(viewOne, 'contentIndex') - get(viewTwo, 'contentIndex');\n}\n\nfunction notifyMutationListeners() {\n  if (Ember.View.notifyMutationListeners) {\n    Ember.run.once(Ember.View, 'notifyMutationListeners');\n  }\n}\n\nvar domManager = Ember.create(Ember.ContainerView.proto().domManager);\n\ndomManager.prepend = function(view, html) {\n  view.$('.ember-list-container').prepend(html);\n  notifyMutationListeners();\n};\n\nfunction syncListContainerWidth(){\n  var elementWidth, columnCount, containerWidth, element;\n\n  elementWidth = get(this, 'elementWidth');\n  columnCount = get(this, 'columnCount');\n  containerWidth = elementWidth * columnCount;\n  element = this.$('.ember-list-container');\n\n  if (containerWidth && element) {\n    element.css('width', containerWidth);\n  }\n}\n\nfunction enableProfilingOutput() {\n  function before(name, time, payload) {\n    console.time(name);\n  }\n\n  function after (name, time, payload) {\n    console.timeEnd(name);\n  }\n\n  if (Ember.ENABLE_PROFILING) {\n    Ember.subscribe('view._scrollContentTo', {\n      before: before,\n      after: after\n    });\n    Ember.subscribe('view.updateContext', {\n      before: before,\n      after: after\n    });\n  }\n}\n\n/**\n  @class Ember.ListViewMixin\n  @namespace Ember\n*/\nEmber.ListViewMixin = Ember.Mixin.create({\n  itemViewClass: Ember.ReusableListItemView,\n  emptyViewClass: Ember.View,\n  classNames: ['ember-list-view'],\n  attributeBindings: ['style'],\n  domManager: domManager,\n  scrollTop: 0,\n  bottomPadding: 0,\n  _lastEndingIndex: 0,\n  paddingCount: 1,\n\n  /**\n    @private\n\n    Setup a mixin.\n    - adding observer to content array\n    - creating child views based on height and length of the content array\n\n    @method init\n  */\n  init: function() {\n    this._super();\n    this.on('didInsertElement', syncListContainerWidth);\n    this.columnCountDidChange();\n    this._syncChildViews();\n    this._addContentArrayObserver();\n  },\n\n  _addContentArrayObserver: Ember.beforeObserver(function() {\n    addContentArrayObserver.call(this);\n  }, 'content'),\n\n  /**\n    Called on your view when it should push strings of HTML into a\n    `Ember.RenderBuffer`.\n\n    Adds a [div](https://developer.mozilla.org/en-US/docs/HTML/Element/div)\n    with a required `ember-list-container` class.\n\n    @method render\n    @param {Ember.RenderBuffer} buffer The render buffer\n  */\n  render: function(buffer) {\n    buffer.push('<div class=\"ember-list-container\">');\n    this._super(buffer);\n    buffer.push('</div>');\n  },\n\n  willInsertElement: function() {\n    if (!this.get(\"height\") || !this.get(\"rowHeight\")) {\n      throw new Error(\"A ListView must be created with a height and a rowHeight.\");\n    }\n    this._super();\n  },\n\n  /**\n    @private\n\n    Sets inline styles of the view:\n    - height\n    - width\n    - position\n    - overflow\n    - -webkit-overflow\n    - overflow-scrolling\n\n    Called while attributes binding.\n\n    @property {Ember.ComputedProperty} style\n  */\n  style: Ember.computed('height', 'width', function() {\n    var height, width, style, css;\n\n    height = get(this, 'height');\n    width = get(this, 'width');\n    css = get(this, 'css');\n\n    style = '';\n\n    if (height) { style += 'height:' + height + 'px;'; }\n    if (width)  { style += 'width:'  + width  + 'px;'; }\n\n    for ( var rule in css ){\n      if (css.hasOwnProperty(rule)) {\n        style += rule + ':' + css[rule] + ';';\n      }\n    }\n\n    return style;\n  }),\n\n  /**\n    @private\n\n    Performs visual scrolling. Is overridden in Ember.ListView.\n\n    @method scrollTo\n  */\n  scrollTo: function(y) {\n    throw new Error('must override to perform the visual scroll and effectively delegate to _scrollContentTo');\n  },\n\n  /**\n    @private\n\n    Internal method used to force scroll position\n\n    @method scrollTo\n  */\n  _scrollTo: Ember.K,\n\n  /**\n    @private\n    @method _scrollContentTo\n  */\n  _scrollContentTo: function(y) {\n    var startingIndex, endingIndex,\n        contentIndex, visibleEndingIndex, maxContentIndex,\n        contentIndexEnd, contentLength, scrollTop, content;\n\n    scrollTop = max(0, y);\n\n    if (get(this, 'scrollTop') === scrollTop) {\n      return;\n    }\n\n    // allow a visual overscroll, but don't scroll the content. As we are doing needless\n    // recycyling, and adding unexpected nodes to the DOM.\n    scrollTop = Math.min(scrollTop, (get(this, 'totalHeight') - get(this, 'height')));\n\n    content = get(this, 'content');\n    contentLength = get(content, 'length');\n    startingIndex = this._startingIndex(contentLength);\n\n    Ember.instrument('view._scrollContentTo', {\n      scrollTop: scrollTop,\n      content: content,\n      startingIndex: startingIndex,\n      endingIndex: min(max(contentLength - 1, 0), startingIndex + this._numChildViewsForViewport())\n    }, function () {\n      Ember.run(this, function(){\n        set(this, 'scrollTop', scrollTop);\n\n        maxContentIndex = max(contentLength - 1, 0);\n\n        startingIndex = this._startingIndex();\n        visibleEndingIndex = startingIndex + this._numChildViewsForViewport();\n\n        endingIndex = min(maxContentIndex, visibleEndingIndex);\n\n        this.trigger('scrollYChanged', y);\n\n        if (startingIndex === this._lastStartingIndex &&\n            endingIndex === this._lastEndingIndex) {\n          return;\n        }\n\n        this._reuseChildren();\n\n        this._lastStartingIndex = startingIndex;\n        this._lastEndingIndex = endingIndex;\n      });\n    }, this);\n  },\n\n  /**\n    @private\n\n    Computes the height for a `Ember.ListView` scrollable container div.\n    You must specify `rowHeight` parameter for the height to be computed properly.\n\n    @property {Ember.ComputedProperty} totalHeight\n  */\n  totalHeight: Ember.computed('content.length', 'rowHeight', 'columnCount', 'bottomPadding', function() {\n    var contentLength, rowHeight, columnCount, bottomPadding;\n\n    contentLength = get(this, 'content.length');\n    rowHeight = get(this, 'rowHeight');\n    columnCount = get(this, 'columnCount');\n    bottomPadding = get(this, 'bottomPadding');\n\n    return ((ceil(contentLength / columnCount)) * rowHeight) + bottomPadding;\n  }),\n\n  /**\n    @private\n    @method _prepareChildForReuse\n  */\n  _prepareChildForReuse: function(childView) {\n    childView.prepareForReuse();\n  },\n\n  /**\n    @private\n    @method _reuseChildForContentIndex\n  */\n  _reuseChildForContentIndex: function(childView, contentIndex) {\n    var content, context, newContext, childsCurrentContentIndex, position, enableProfiling;\n\n    content = get(this, 'content');\n    enableProfiling = get(this, 'enableProfiling');\n    position = this.positionForIndex(contentIndex);\n    childView.updatePosition(position);\n\n    set(childView, 'contentIndex', contentIndex);\n\n    if (enableProfiling) {\n      Ember.instrument('view._reuseChildForContentIndex', position, function(){}, this);\n    }\n\n    newContext = content.objectAt(contentIndex);\n    childView.updateContext(newContext);\n  },\n\n  /**\n    @private\n    @method positionForIndex\n  */\n  positionForIndex: function(index){\n    var elementWidth, width, columnCount, rowHeight, y, x;\n\n    elementWidth = get(this, 'elementWidth') || 1;\n    width = get(this, 'width') || 1;\n    columnCount = get(this, 'columnCount');\n    rowHeight = get(this, 'rowHeight');\n\n    y = (rowHeight * floor(index/columnCount));\n    x = (index % columnCount) * elementWidth;\n\n    return {\n      y: y,\n      x: x\n    };\n  },\n\n  /**\n    @private\n    @method _childViewCount\n  */\n  _childViewCount: function() {\n    var contentLength, childViewCountForHeight;\n\n    contentLength = get(this, 'content.length');\n    childViewCountForHeight = this._numChildViewsForViewport();\n\n    return min(contentLength, childViewCountForHeight);\n  },\n\n  /**\n    @private\n\n    Returns a number of columns in the Ember.ListView (for grid layout).\n\n    If you want to have a multi column layout, you need to specify both\n    `width` and `elementWidth`.\n\n    If no `elementWidth` is specified, it returns `1`. Otherwise, it will\n    try to fit as many columns as possible for a given `width`.\n\n    @property {Ember.ComputedProperty} columnCount\n  */\n  columnCount: Ember.computed('width', 'elementWidth', function() {\n    var elementWidth, width, count;\n\n    elementWidth = get(this, 'elementWidth');\n    width = get(this, 'width');\n\n    if (elementWidth) {\n      count = floor(width / elementWidth);\n    } else {\n      count = 1;\n    }\n\n    return count;\n  }),\n\n  /**\n    @private\n\n    Fires every time column count is changed.\n\n    @event columnCountDidChange\n  */\n  columnCountDidChange: Ember.observer(function(){\n    var ratio, currentScrollTop, proposedScrollTop, maxScrollTop,\n        scrollTop, lastColumnCount, newColumnCount, element;\n\n    lastColumnCount = this._lastColumnCount;\n\n    currentScrollTop = get(this, 'scrollTop');\n    newColumnCount = get(this, 'columnCount');\n    maxScrollTop = get(this, 'maxScrollTop');\n    element = get(this, 'element');\n\n    this._lastColumnCount = newColumnCount;\n\n    if (lastColumnCount) {\n      ratio = (lastColumnCount / newColumnCount);\n      proposedScrollTop = currentScrollTop * ratio;\n      scrollTop = min(maxScrollTop, proposedScrollTop);\n\n      this._scrollTo(scrollTop);\n      set(this, 'scrollTop', scrollTop);\n    }\n\n    if (arguments.length > 0) {\n      // invoked by observer\n      Ember.run.schedule('afterRender', this, syncListContainerWidth);\n    }\n  }, 'columnCount'),\n\n  /**\n    @private\n\n    Computes max possible scrollTop value given the visible viewport\n    and scrollable container div height.\n\n    @property {Ember.ComputedProperty} maxScrollTop\n  */\n  maxScrollTop: Ember.computed('height', 'totalHeight', function(){\n    var totalHeight, viewportHeight;\n\n    totalHeight = get(this, 'totalHeight');\n    viewportHeight = get(this, 'height');\n\n    return max(0, totalHeight - viewportHeight);\n  }),\n\n  /**\n    @private\n\n    Computes the number of views that would fit in the viewport area.\n    You must specify `height` and `rowHeight` parameters for the number of\n    views to be computed properly.\n\n    @method _numChildViewsForViewport\n  */\n  _numChildViewsForViewport: function() {\n    var height, rowHeight, paddingCount, columnCount;\n\n    height = get(this, 'height');\n    rowHeight = get(this, 'rowHeight');\n    paddingCount = get(this, 'paddingCount');\n    columnCount = get(this, 'columnCount');\n\n    return (ceil(height / rowHeight) * columnCount) + (paddingCount * columnCount);\n  },\n\n  /**\n    @private\n\n    Computes the starting index of the item views array.\n    Takes `scrollTop` property of the element into account.\n\n    Is used in `_syncChildViews`.\n\n    @method _startingIndex\n  */\n  _startingIndex: function(_contentLength) {\n    var scrollTop, rowHeight, columnCount, calculatedStartingIndex,\n        contentLength, largestStartingIndex;\n\n    if (_contentLength === undefined) {\n      contentLength = get(this, 'content.length');\n    } else {\n      contentLength = _contentLength;\n    }\n\n    scrollTop = get(this, 'scrollTop');\n    rowHeight = get(this, 'rowHeight');\n    columnCount = get(this, 'columnCount');\n\n    calculatedStartingIndex = floor(scrollTop / rowHeight) * columnCount;\n\n    largestStartingIndex = max(contentLength - 1, 0);\n\n    return min(calculatedStartingIndex, largestStartingIndex);\n  },\n\n  /**\n    @private\n    @event contentWillChange\n  */\n  contentWillChange: Ember.beforeObserver(function() {\n    var content;\n\n    content = get(this, 'content');\n\n    if (content) {\n      content.removeArrayObserver(this);\n    }\n  }, 'content'),\n\n  /**),\n    @private\n    @event contentDidChange\n  */\n  contentDidChange: Ember.observer(function() {\n    addContentArrayObserver.call(this);\n    syncChildViews.call(this);\n  }, 'content'),\n\n  /**\n    @private\n    @property {Function} needsSyncChildViews\n  */\n  needsSyncChildViews: Ember.observer(syncChildViews, 'height', 'width', 'columnCount'),\n\n  /**\n    @private\n\n    Returns a new item view. Takes `contentIndex` to set the context\n    of the returned view properly.\n\n    @param {Number} contentIndex item index in the content array\n    @method _addItemView\n  */\n  _addItemView: function(contentIndex){\n    var itemViewClass, childView;\n\n    itemViewClass = get(this, 'itemViewClass');\n    childView = this.createChildView(itemViewClass);\n\n    this.pushObject(childView);\n   },\n\n  /**\n    @private\n\n    Intelligently manages the number of childviews.\n\n    @method _syncChildViews\n   **/\n  _syncChildViews: function(){\n    var itemViewClass, startingIndex, childViewCount,\n        endingIndex, numberOfChildViews, numberOfChildViewsNeeded,\n        childViews, count, delta, index, childViewsLength, contentIndex;\n\n    if (get(this, 'isDestroyed') || get(this, 'isDestroying')) {\n      return;\n    }\n\n    childViewCount = this._childViewCount();\n    childViews = this.positionOrderedChildViews();\n\n    startingIndex = this._startingIndex();\n    endingIndex = startingIndex + childViewCount;\n\n    numberOfChildViewsNeeded = childViewCount;\n    numberOfChildViews = childViews.length;\n\n    delta = numberOfChildViewsNeeded - numberOfChildViews;\n\n    if (delta === 0) {\n      // no change\n    } else if (delta > 0) {\n      // more views are needed\n      contentIndex = this._lastEndingIndex;\n\n      for (count = 0; count < delta; count++, contentIndex++) {\n        this._addItemView(contentIndex);\n      }\n\n    } else {\n      // less views are needed\n      forEach.call(\n        childViews.splice(numberOfChildViewsNeeded, numberOfChildViews),\n        removeAndDestroy,\n        this\n      );\n    }\n\n    this._reuseChildren();\n\n    this._lastStartingIndex = startingIndex;\n    this._lastEndingIndex   = this._lastEndingIndex + delta;\n  },\n\n  /**\n    @private\n    @method _reuseChildren\n  */\n  _reuseChildren: function(){\n    var contentLength, childViews, childViewsLength,\n        startingIndex, endingIndex, childView, attrs,\n        contentIndex, visibleEndingIndex, maxContentIndex,\n        contentIndexEnd, scrollTop;\n\n    scrollTop = get(this, 'scrollTop');\n    contentLength = get(this, 'content.length');\n    maxContentIndex = max(contentLength - 1, 0);\n    childViews = this.getReusableChildViews();\n    childViewsLength =  childViews.length;\n\n    startingIndex = this._startingIndex();\n    visibleEndingIndex = startingIndex + this._numChildViewsForViewport();\n\n    endingIndex = min(maxContentIndex, visibleEndingIndex);\n\n    contentIndexEnd = min(visibleEndingIndex, startingIndex + childViewsLength);\n\n    for (contentIndex = startingIndex; contentIndex < contentIndexEnd; contentIndex++) {\n      childView = childViews[contentIndex % childViewsLength];\n      this._reuseChildForContentIndex(childView, contentIndex);\n    }\n  },\n\n  /**\n    @private\n    @method getReusableChildViews\n  */\n  getReusableChildViews: function() {\n    return this._childViews;\n  },\n\n  /**\n    @private\n    @method positionOrderedChildViews\n  */\n  positionOrderedChildViews: function() {\n    return this.getReusableChildViews().sort(sortByContentIndex);\n  },\n\n  arrayWillChange: Ember.K,\n\n  /**\n    @private\n    @event arrayDidChange\n  */\n  // TODO: refactor\n  arrayDidChange: function(content, start, removedCount, addedCount) {\n    var index, contentIndex;\n\n    if (this.state === 'inDOM') {\n      // ignore if all changes are out of the visible change\n      if( start >= this._lastStartingIndex || start < this._lastEndingIndex) {\n        index = 0;\n        // ignore all changes not in the visible range\n        // this can re-position many, rather then causing a cascade of re-renders\n        forEach.call(\n          this.positionOrderedChildViews(),\n          function(childView) {\n            contentIndex = this._lastStartingIndex + index;\n            this._reuseChildForContentIndex(childView, contentIndex);\n            index++;\n          },\n          this\n        );\n      }\n\n      syncChildViews.call(this);\n    }\n  }\n});\n\n})();\n\n\n\n(function() {\nvar get = Ember.get, set = Ember.set;\n\n/**\n  The `Ember.ListView` view class renders a\n  [div](https://developer.mozilla.org/en/HTML/Element/div) HTML element,\n  with `ember-list-view` class.\n\n  The context of each item element within the `Ember.ListView` are populated\n  from the objects in the `Element.ListView`'s `content` property.\n\n  ### `content` as an Array of Objects\n\n  The simplest version of an `Ember.ListView` takes an array of object as its\n  `content` property. The object will be used as the `context` each item element\n  inside the rendered `div`.\n\n  Example:\n\n  ```javascript\n  App.ContributorsRoute = Ember.Route.extend({\n    model: function() {\n      return [{ name: 'Stefan Penner' }, { name: 'Alex Navasardyan' }, { name: 'Ray Cohen'}];\n    }\n  });\n  ```\n\n  ```handlebars\n  {{#ember-list items=contributors height=500 rowHeight=50}}\n    {{name}}\n  {{/ember-list}}\n  ```\n\n  Would result in the following HTML:\n\n  ```html\n   <div id=\"ember181\" class=\"ember-view ember-list-view\" style=\"height:500px;width:500px;position:relative;overflow:scroll;-webkit-overflow-scrolling:touch;overflow-scrolling:touch;\">\n    <div class=\"ember-list-container\">\n      <div id=\"ember186\" class=\"ember-view ember-list-item-view\" style=\"-webkit-transform: translate3d(0px, 0px, 0);\">\n        <script id=\"metamorph-0-start\" type=\"text/x-placeholder\"></script>Stefan Penner<script id=\"metamorph-0-end\" type=\"text/x-placeholder\"></script>\n      </div>\n      <div id=\"ember187\" class=\"ember-view ember-list-item-view\" style=\"-webkit-transform: translate3d(0px, 50px, 0);\">\n        <script id=\"metamorph-1-start\" type=\"text/x-placeholder\"></script>Alex Navasardyan<script id=\"metamorph-1-end\" type=\"text/x-placeholder\"></script>\n      </div>\n      <div id=\"ember188\" class=\"ember-view ember-list-item-view\" style=\"-webkit-transform: translate3d(0px, 100px, 0);\">\n        <script id=\"metamorph-2-start\" type=\"text/x-placeholder\"></script>Rey Cohen<script id=\"metamorph-2-end\" type=\"text/x-placeholder\"></script>\n      </div>\n      <div id=\"ember189\" class=\"ember-view ember-list-scrolling-view\" style=\"height: 150px\"></div>\n    </div>\n  </div>\n  ```\n\n  By default `Ember.ListView` provides support for `height`,\n  `rowHeight`, `width`, `elementWidth`, `scrollTop` parameters.\n\n  Note, that `height` and `rowHeight` are required parameters.\n\n  ```handlebars\n  {{#ember-list items=this height=500 rowHeight=50}}\n    {{name}}\n  {{/ember-list}}\n  ```\n\n  If you would like to have multiple columns in your view layout, you can\n  set `width` and `elementWidth` parameters respectively.\n\n  ```handlebars\n  {{#ember-list items=this height=500 rowHeight=50 width=500 elementWidth=80}}\n    {{name}}\n  {{/ember-list}}\n  ```\n\n  ### extending `Ember.ListView`\n\n  Example:\n\n  ```handlebars\n  {{view App.ListView contentBinding=\"content\"}}\n\n  <script type=\"text/x-handlebars\" data-template-name=\"row_item\">\n    {{name}}\n  </script>\n  ```\n\n  ```javascript\n  App.ListView = Ember.ListView.extend({\n    height: 500,\n    width: 500,\n    elementWidth: 80,\n    rowHeight: 20,\n    itemViewClass: Ember.ListItemView.extend({templateName: \"row_item\"})\n  });\n  ```\n\n  @extends Ember.ContainerView\n  @class ListView\n  @namespace Ember\n*/\nEmber.ListView = Ember.ContainerView.extend(Ember.ListViewMixin, {\n  css: {\n    position: 'relative',\n    overflow: 'scroll',\n    '-webkit-overflow-scrolling': 'touch',\n    'overflow-scrolling': 'touch'\n  },\n\n  applyTransform: Ember.ListViewHelper.applyTransform,\n\n  _scrollTo: function(scrollTop) {\n    var element = get(this, 'element');\n\n    if (element) { element.scrollTop = scrollTop; }\n  },\n\n  didInsertElement: function() {\n    var that = this,\n        element = get(this, 'element');\n\n    this._updateScrollableHeight();\n\n    this._scroll = function(e) { that.scroll(e); };\n\n    Ember.$(element).on('scroll', this._scroll);\n  },\n\n  willDestroyElement: function() {\n    var element;\n\n    element = get(this, 'element');\n\n    Ember.$(element).off('scroll', this._scroll);\n  },\n\n  scroll: function(e) {\n    this.scrollTo(e.target.scrollTop);\n  },\n\n  scrollTo: function(y){\n    var element = get(this, 'element');\n    this._scrollTo(y);\n    this._scrollContentTo(y);\n  },\n\n  totalHeightDidChange: Ember.observer(function () {\n    Ember.run.scheduleOnce('afterRender', this, this._updateScrollableHeight);\n  }, 'totalHeight'),\n\n  _updateScrollableHeight: function () {\n    if (this.state === 'inDOM') {\n      this.$('.ember-list-container').css({\n        height: get(this, 'totalHeight')\n      });\n    }\n  }\n});\n\n})();\n\n\n\n(function() {\nvar fieldRegex = /input|textarea|select/i,\n  hasTouch = ('ontouchstart' in window) || window.DocumentTouch && document instanceof window.DocumentTouch,\n  handleStart, handleMove, handleEnd, handleCancel,\n  startEvent, moveEvent, endEvent, cancelEvent;\nif (hasTouch) {\n  startEvent = 'touchstart';\n  handleStart = function (e) {\n    var touch = e.touches[0],\n      target = touch && touch.target;\n    // avoid e.preventDefault() on fields\n    if (target && fieldRegex.test(target.tagName)) {\n      return;\n    }\n    bindWindow(this.scrollerEventHandlers);\n    this.willBeginScroll(e.touches, e.timeStamp);\n    e.preventDefault();\n  };\n  moveEvent = 'touchmove';\n  handleMove = function (e) {\n    this.continueScroll(e.touches, e.timeStamp);\n  };\n  endEvent = 'touchend';\n  handleEnd = function (e) {\n    // if we didn't end up scrolling we need to\n    // synthesize click since we did e.preventDefault()\n    // on touchstart\n    if (!this._isScrolling) {\n      synthesizeClick(e);\n    }\n    unbindWindow(this.scrollerEventHandlers);\n    this.endScroll(e.timeStamp);\n  };\n  cancelEvent = 'touchcancel';\n  handleCancel = function (e) {\n    unbindWindow(this.scrollerEventHandlers);\n    this.endScroll(e.timeStamp);\n  };\n} else {\n  startEvent = 'mousedown';\n  handleStart = function (e) {\n    if (e.which !== 1) return;\n    var target = e.target;\n    // avoid e.preventDefault() on fields\n    if (target && fieldRegex.test(target.tagName)) {\n      return;\n    }\n    bindWindow(this.scrollerEventHandlers);\n    this.willBeginScroll([e], e.timeStamp);\n    e.preventDefault();\n  };\n  moveEvent = 'mousemove';\n  handleMove = function (e) {\n    this.continueScroll([e], e.timeStamp);\n  };\n  endEvent = 'mouseup';\n  handleEnd = function (e) {\n    unbindWindow(this.scrollerEventHandlers);\n    this.endScroll(e.timeStamp);\n  };\n  cancelEvent = 'mouseout';\n  handleCancel = function (e) {\n    if (e.relatedTarget) return;\n    unbindWindow(this.scrollerEventHandlers);\n    this.endScroll(e.timeStamp);\n  };\n}\n\nfunction handleWheel(e) {\n  this.mouseWheel(e);\n  e.preventDefault();\n}\n\nfunction bindElement(el, handlers) {\n  el.addEventListener(startEvent, handlers.start, false);\n  el.addEventListener('mousewheel', handlers.wheel, false);\n}\n\nfunction unbindElement(el, handlers) {\n  el.removeEventListener(startEvent, handlers.start, false);\n  el.removeEventListener('mousewheel', handlers.wheel, false);\n}\n\nfunction bindWindow(handlers) {\n  window.addEventListener(moveEvent, handlers.move, true);\n  window.addEventListener(endEvent, handlers.end, true);\n  window.addEventListener(cancelEvent, handlers.cancel, true);\n}\n\nfunction unbindWindow(handlers) {\n  window.removeEventListener(moveEvent, handlers.move, true);\n  window.removeEventListener(endEvent, handlers.end, true);\n  window.removeEventListener(cancelEvent, handlers.cancel, true);\n}\n\nEmber.VirtualListScrollerEvents = Ember.Mixin.create({\n  init: function() {\n    this.on('didInsertElement', this, 'bindScrollerEvents');\n    this.on('willDestroyElement', this, 'unbindScrollerEvents');\n    this.scrollerEventHandlers = {\n      start: bind(this, handleStart),\n      move: bind(this, handleMove),\n      end: bind(this, handleEnd),\n      cancel: bind(this, handleCancel),\n      wheel: bind(this, handleWheel)\n    };\n    return this._super();\n  },\n  bindScrollerEvents: function() {\n    var el = this.get('element'),\n      handlers = this.scrollerEventHandlers;\n    bindElement(el, handlers);\n  },\n  unbindScrollerEvents: function() {\n    var el = this.get('element'),\n      handlers = this.scrollerEventHandlers;\n    unbindElement(el, handlers);\n    unbindWindow(handlers);\n  }\n});\n\nfunction bind(view, handler) {\n  return function (evt) {\n    handler.call(view, evt);\n  };\n}\n\nfunction synthesizeClick(e) {\n  var point = e.changedTouches[0],\n    target = point.target,\n    ev;\n  if (target && fieldRegex.test(target.tagName)) {\n    ev = document.createEvent('MouseEvents');\n    ev.initMouseEvent('click', true, true, e.view, 1, point.screenX, point.screenY, point.clientX, point.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, 0, null);\n    return target.dispatchEvent(ev);\n  }\n}\n\n})();\n\n\n\n(function() {\n/*global Scroller*/\nvar max = Math.max, get = Ember.get, set = Ember.set;\n\nfunction updateScrollerDimensions(target) {\n  var width, height, totalHeight;\n\n  target = target || this;\n\n  width = get(target, 'width');\n  height = get(target, 'height');\n  totalHeight = get(target, 'totalHeight');\n\n  target.scroller.setDimensions(width, height, width, totalHeight);\n  target.trigger('scrollerDimensionsDidChange');\n}\n\n/**\n  VirtualListView\n\n  @class VirtualListView\n  @namespace Ember\n*/\nEmber.VirtualListView = Ember.ContainerView.extend(Ember.ListViewMixin, Ember.VirtualListScrollerEvents, {\n  _isScrolling: false,\n  _mouseWheel: null,\n  css: {\n    position: 'relative',\n    overflow: 'hidden'\n  },\n\n  init: function(){\n    this._super();\n    this.setupScroller();\n    this.setupPullToRefresh();\n  },\n  _scrollerTop: 0,\n  applyTransform: Ember.ListViewHelper.apply3DTransform,\n\n  setupScroller: function(){\n    var view, y;\n\n    view = this;\n\n    view.scroller = new Scroller(function(left, top, zoom) {\n      if (view.state !== 'inDOM') { return; }\n\n      if (view.listContainerElement) {\n        view._scrollerTop = top;\n        view._scrollContentTo(top);\n        view.applyTransform(view.listContainerElement, 0, -top);\n      }\n    }, {\n      scrollingX: false,\n      scrollingComplete: function(){\n        view.trigger('scrollingDidComplete');\n      }\n    });\n\n    view.trigger('didInitializeScroller');\n    updateScrollerDimensions(view);\n  },\n  setupPullToRefresh: function() {\n    if (!this.pullToRefreshViewClass) { return; }\n    this._insertPullToRefreshView();\n    this._activateScrollerPullToRefresh();\n  },\n  _insertPullToRefreshView: function(){\n    this.pullToRefreshView = this.createChildView(this.pullToRefreshViewClass);\n    this.insertAt(0, this.pullToRefreshView);\n    var view = this;\n    this.pullToRefreshView.on('didInsertElement', function(){\n      Ember.run.schedule('afterRender', this, function(){\n        view.applyTransform(this.get('element'), 0, -1 * view.pullToRefreshViewHeight);\n      });\n    });\n  },\n  _activateScrollerPullToRefresh: function(){\n    var view = this;\n    function activatePullToRefresh(){\n      view.pullToRefreshView.set('active', true);\n      view.trigger('activatePullToRefresh');\n    }\n    function deactivatePullToRefresh() {\n      view.pullToRefreshView.set('active', false);\n      view.trigger('deactivatePullToRefresh');\n    }\n    function startPullToRefresh() {\n      Ember.run(function(){\n        view.pullToRefreshView.set('refreshing', true);\n\n        function finishRefresh(){\n          if (view && !view.get('isDestroyed') && !view.get('isDestroying')) {\n            view.scroller.finishPullToRefresh();\n            view.pullToRefreshView.set('refreshing', false);\n          }\n        }\n        view.startRefresh(finishRefresh);\n      });\n    }\n    this.scroller.activatePullToRefresh(\n      this.pullToRefreshViewHeight,\n      activatePullToRefresh,\n      deactivatePullToRefresh,\n      startPullToRefresh\n    );\n  },\n\n  getReusableChildViews: function(){\n    var firstView = this._childViews[0];\n    if (firstView && firstView === this.pullToRefreshView) {\n      return this._childViews.slice(1);\n    } else {\n      return this._childViews;\n    }\n  },\n\n  scrollerDimensionsNeedToChange: Ember.observer(function() {\n    Ember.run.once(this, updateScrollerDimensions);\n  }, 'width', 'height', 'totalHeight'),\n\n  didInsertElement: function() {\n    this.listContainerElement = this.$('> .ember-list-container')[0];\n  },\n\n  willBeginScroll: function(touches, timeStamp) {\n    this._isScrolling = false;\n    this.trigger('scrollingDidStart');\n\n    this.scroller.doTouchStart(touches, timeStamp);\n  },\n\n  continueScroll: function(touches, timeStamp) {\n    Ember.run(this, function(){\n      var startingScrollTop, endingScrollTop, event;\n\n      if (this._isScrolling) {\n        this.scroller.doTouchMove(touches, timeStamp);\n      } else {\n        startingScrollTop = this._scrollerTop;\n\n        this.scroller.doTouchMove(touches, timeStamp);\n\n        endingScrollTop = this._scrollerTop;\n\n        if (startingScrollTop !== endingScrollTop) {\n          event = Ember.$.Event(\"scrollerstart\");\n          Ember.$(touches[0].target).trigger(event);\n\n          this._isScrolling = true;\n        }\n      }\n    });\n  },\n\n  endScroll: function(timeStamp) {\n    this.scroller.doTouchEnd(timeStamp);\n  },\n\n  // api\n  scrollTo: function(y, animate) {\n    if (animate === undefined) {\n      animate = true;\n    }\n\n    this.scroller.scrollTo(0, y, animate, 1);\n  },\n\n  // events\n  mouseWheel: function(e){\n    var inverted, delta, candidatePosition;\n\n    inverted = e.webkitDirectionInvertedFromDevice;\n    delta = e.wheelDeltaY * (inverted ? 0.8 : -0.8);\n    candidatePosition = this.scroller.__scrollTop + delta;\n\n    if ((candidatePosition >= 0) && (candidatePosition <= this.scroller.__maxScrollTop)) {\n      this.scroller.scrollBy(0, delta, true);\n    }\n\n    return false;\n  }\n});\n\n})();\n\n\n\n(function() {\nEmber.Handlebars.registerHelper('ember-list', function emberList(options) {\n  var hash = options.hash;\n  var types = options.hashTypes;\n\n  hash.content = hash.items;\n  delete hash.items;\n\n  types.content = types.items;\n  delete types.items;\n\n  if (!hash.content) {\n    hash.content = \"this\";\n    types.content = \"ID\";\n  }\n\n  for (var prop in hash) {\n    if (/-/.test(prop)) {\n      var camelized = Ember.String.camelize(prop);\n      hash[camelized] = hash[prop];\n      types[camelized] = types[prop];\n      delete hash[prop];\n      delete types[prop];\n    }\n  }\n\n  return Ember.Handlebars.helpers.collection.call(this, 'Ember.ListView', options);\n});\n\n\n})();\n\n\n\n(function() {\n\n})();\n","App.PostsView = Em.ListView.extend({\n  height: 500,\n  rowHeight: 50,\n  itemsPerLoad: 10,\n  itemViewClass: Em.ListItemView.extend({\n    tagName: 'li',\n    templateName: 'post_preview',\n  }),\n  tagName: 'ul',\n\n  setSize: function() {\n    var height = $(window).height();\n    var itemsPerLoad = this.get('itemsPerLoad');\n    var rowHeight = height / itemsPerLoad;\n\n    this.set('height', height);\n    this.set('rowHeight', rowHeight);\n  }.on('didInsertElement'),\n})\n","'use strict';\n\nmodule.exports = 'development';\n"]}